{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","url","require","Map","token","mapStyles","ReactMapboxGl","accessToken","layerPaint","heatmap-weight","property","type","stops","heatmap-intensity","heatmap-color","heatmap-radius","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onStyleLoad","map","props","handleLayerChange","event","setState","selectedLayer","target","value","handleStartDateChange","selectedStartDate","handleEndDateChange","selectedEndDate","state","center","layerData","bind","assertThisInitialized","getData","_this2","axios","get","concat","crossdomain","then","res","response","data","_this3","layers","layer","i","react_default","a","createElement","MenuItem_default","key","classes","className","root","AppBar_default","position","color","style","backgroundColor","Toolbar_default","alt","src","height","width","containerStyle","showUserLocation","zoom","right","top","lib","paint","features","el","index","coordinates","geometry","properties","Card_default","card","ExpansionPanel_default","ExpansionPanelSummary_default","expandIcon","ExpandMore_default","Typography_default","variant","ExpansionPanelDetails_default","gutterBottom","FormControl_default","formControl","InputLabel_default","htmlFor","Select_default","onChange","inputProps","name","id","renderListOfLayers","marginTop","TextField_default","textField","InputLabelProps","shrink","Button_default","button","onClick","PureComponent","withStyles","theme","flexGrow","display","flexWrap","left","maxWidth","media","margin","spacing","unit","minWidth","selectEmpty","marginLeft","marginRight","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e997ccda.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component, PureComponent } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {  ScaleControl,\r\n          ZoomControl,\r\n          RotationControl } from \"react-mapbox-gl\";\r\n\r\nimport ReactMapboxGl, { Layer, Feature } from \"react-mapbox-gl\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Card from '@material-ui/core/Card';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MomentUtils from '@date-io/moment';\r\n\r\nimport axios from 'axios';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nconst url = '40.113.148.40:5000'\r\nconst data = require('./heatmapData.json');\r\nconst data2 = require('./data-test.json');\r\nconst { token, mapStyles } = require('./config.json');\r\n\r\nconst Map = ReactMapboxGl({\r\n  accessToken: \"pk.eyJ1IjoiZGlhbmFkMyIsImEiOiJjam9qdTVpODUwOGQ2M2xwanBrcnNrczdoIn0.17CYLLGtE45Y3rkNkSCSSA\"\r\n});\r\n\r\n\r\nconst mapStyle = {\r\n  flex: 1\r\n};\r\n\r\n\r\n\r\nconst layerPaint = {\r\n  'heatmap-weight': {\r\n    property: 'name',\r\n    type: 'exponential',\r\n    stops: [[0, 0], [5, 2]]\r\n  },\r\n  // Increase the heatmap color weight weight by zoom level\r\n  // heatmap-ntensity is a multiplier on top of heatmap-weight\r\n  'heatmap-intensity': {\r\n    stops: [[0, 0], [5, 1.2]]\r\n  },\r\n  // Color ramp for heatmap.  Domain is 0 (low) to 1 (high).\r\n  // Begin color ramp at 0-stop with a 0-transparancy color\r\n  // to create a blur-like effect.\r\n  'heatmap-color': [\r\n    'interpolate',\r\n    ['linear'],\r\n    ['heatmap-density'],\r\n    0,\r\n    'rgba(33,102,172,0)',\r\n    0.25,\r\n    'rgb(103,169,207)',\r\n    0.5,\r\n    'rgb(209,229,240)',\r\n    0.8,\r\n    'rgb(253,219,199)',\r\n    1,\r\n    'rgb(239,138,98)',\r\n    2,\r\n    'rgb(178,24,43)'\r\n  ],\r\n  // Adjust the heatmap radius by zoom level\r\n  'heatmap-radius': {\r\n    stops: [[0, 1], [5, 50]]\r\n  }\r\n};\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  card: {\r\n    position: 'absolute',\r\n    top: 80,\r\n    left: 40,\r\n    maxWidth: 345,\r\n  },\r\n  media: {\r\n    height: 140,\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing.unit,\r\n    minWidth: 250,\r\n  },\r\n  button: {\r\n    margin: theme.spacing.unit,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing.unit * 2,\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing.unit,\r\n    marginRight: theme.spacing.unit,\r\n    width: 250,\r\n  },\r\n});\r\n\r\nclass App extends PureComponent {\r\n\r\n  \r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      selectedLayer: '',\r\n      selectedStartDate: '2010-05-01',\r\n      selectedEndDate: '2010-05-25',\r\n      center:[25,45],\r\n      layerData:null\r\n    };\r\n    this.handleLayerChange = this.handleLayerChange.bind(this);\r\n    this.handleStartDateChange = this.handleStartDateChange.bind(this);\r\n    this.handleEndDateChange = this.handleEndDateChange.bind(this);\r\n    this.getData = this.getData.bind(this);\r\n  }\r\n\r\n  getData() {\r\n\r\n    axios.get(`http://${url}/get/layer/time/${this.state.selectedLayer}/${this.state.selectedStartDate}/00:00:00/${this.state.selectedEndDate}/00:00:00`, {crossdomain: true })\r\n      .then(res => {\r\n        const response = res.data;\r\n        this.setState({ layerData: response });\r\n      })\r\n  }\r\n  componentDidMount() {\r\n    axios.get(`http://${url}/get/layers`, {crossdomain: true })\r\n      .then(res => {\r\n        const response = res.data;\r\n        this.setState({ layers: response.layers });\r\n      })\r\n  }\r\n  renderListOfLayers() {\r\n    return this.state.layers ? this.state.layers.map((layer, i) => {\r\n      return (\r\n        <MenuItem\r\n          key={i}\r\n          value={layer}>\r\n          {layer}\r\n        </MenuItem>\r\n      );\r\n    }) : [];\r\n  }\r\n  \r\n  onStyleLoad = (map) => {\r\n    const { onStyleLoad } = this.props;\r\n    return onStyleLoad && onStyleLoad(map);\r\n  }\r\n\r\n  handleLayerChange = (event) => {\r\n    this.setState({selectedLayer: event.target.value });\r\n  };\r\n\r\n  handleStartDateChange = (event) => {\r\n    this.setState({ selectedStartDate: event.target.value });\r\n  };\r\n  handleEndDateChange = (event) => {\r\n    this.setState({ selectedEndDate: event.target.value });\r\n  };\r\n\r\n\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      \r\n      <div className={classes.root}>\r\n        <AppBar position=\"static\" color=\"default\" style={{backgroundColor:'#fff'}}>\r\n          <Toolbar>\r\n            <img alt=\"logo\" src=\"./logo.png\" style={{\"height\":\"40px\",width:\"auto\" }}/>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Map style=\"mapbox://styles/mapbox/dark-v9\"\r\n          containerStyle={{\r\n            height: \"100vh\",\r\n            width: \"100vw\"\r\n          }}\r\n          showUserLocation={true}\r\n          center={this.state.center}\r\n          zoom={[1]}\r\n          onStyleLoad={this.onStyleLoad}>\r\n          <div style={{position: 'absolute', right: 0, top:0}}>\r\n              <ScaleControl />\r\n              <ZoomControl />\r\n              <RotationControl style={{\"top\":80}} />\r\n          </div>\r\n\r\n        {this.state.layerData && <Layer type=\"heatmap\" paint={layerPaint}>\r\n            {this.state.layerData.features.map((el, index) => (\r\n              <Feature key={index} coordinates={el.geometry.coordinates} properties={el.properties} />\r\n            ))}\r\n          </Layer>} \r\n        </Map>\r\n        <Card className={classes.card}>\r\n          <ExpansionPanel>\r\n            <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\r\n              <Typography variant=\"h6\">ANALYSIS</Typography>\r\n            </ExpansionPanelSummary>\r\n            <ExpansionPanelDetails>\r\n              <div>\r\n              <Typography variant=\"body1\" gutterBottom>\r\n                Select Layer Data:\r\n              </Typography>\r\n              <FormControl className={classes.formControl}>\r\n                <InputLabel htmlFor=\"layers\">Layers</InputLabel>\r\n                  <Select\r\n                    value={this.state.selectedLayer}\r\n                    onChange={this.handleLayerChange}\r\n                    inputProps={{\r\n                    name: 'layer',\r\n                    id: 'layers',\r\n                  }}>\r\n                    <MenuItem value=\"\">\r\n                      <em>None</em>\r\n                    </MenuItem>\r\n                    {this.renderListOfLayers()}\r\n                  </Select>\r\n              </FormControl>\r\n              <Typography variant=\"body1\" gutterBottom style={{\"marginTop\":\"40px\"}}>\r\n                Select Start Date:\r\n              </Typography>\r\n              <TextField\r\n                id=\"date\"\r\n                type=\"date\"\r\n                value={this.state.selectedStartDate}\r\n                onChange={this.handleStartDateChange}\r\n                className={classes.textField}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                />\r\n                \r\n              \r\n              <Typography variant=\"body1\" gutterBottom style={{\"marginTop\":\"40px\"}}>\r\n                Select End Date:\r\n              </Typography>\r\n              <TextField\r\n                id=\"date\"\r\n                type=\"date\"\r\n                value={this.state.selectedEndDate}\r\n                onChange={this.handleEndDateChange}\r\n                className={classes.textField}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                />\r\n\r\n                <Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={this.getData}>\r\n                RUN\r\n              </Button>\r\n                \r\n              </div>\r\n                \r\n            </ExpansionPanelDetails>\r\n          </ExpansionPanel>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles) (App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}